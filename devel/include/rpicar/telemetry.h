// Generated by gencpp from file rpicar/telemetry.msg
// DO NOT EDIT!


#ifndef RPICAR_MESSAGE_TELEMETRY_H
#define RPICAR_MESSAGE_TELEMETRY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_msgs/Range.h>
#include <sensor_msgs/Range.h>
#include <sensor_msgs/BatteryState.h>
#include <sensor_msgs/Imu.h>
#include <sensor_msgs/Temperature.h>
#include <sensor_msgs/MagneticField.h>
#include <nav_msgs/Odometry.h>
#include <geometry_msgs/PoseWithCovarianceStamped.h>

namespace rpicar
{
template <class ContainerAllocator>
struct telemetry_
{
  typedef telemetry_<ContainerAllocator> Type;

  telemetry_()
    : US1()
    , US2()
    , Battery()
    , IMU()
    , IMU_temp()
    , IMU_mag()
    , VO()
    , EKF_pose()  {
    }
  telemetry_(const ContainerAllocator& _alloc)
    : US1(_alloc)
    , US2(_alloc)
    , Battery(_alloc)
    , IMU(_alloc)
    , IMU_temp(_alloc)
    , IMU_mag(_alloc)
    , VO(_alloc)
    , EKF_pose(_alloc)  {
  (void)_alloc;
    }



   typedef  ::sensor_msgs::Range_<ContainerAllocator>  _US1_type;
  _US1_type US1;

   typedef  ::sensor_msgs::Range_<ContainerAllocator>  _US2_type;
  _US2_type US2;

   typedef  ::sensor_msgs::BatteryState_<ContainerAllocator>  _Battery_type;
  _Battery_type Battery;

   typedef  ::sensor_msgs::Imu_<ContainerAllocator>  _IMU_type;
  _IMU_type IMU;

   typedef  ::sensor_msgs::Temperature_<ContainerAllocator>  _IMU_temp_type;
  _IMU_temp_type IMU_temp;

   typedef  ::sensor_msgs::MagneticField_<ContainerAllocator>  _IMU_mag_type;
  _IMU_mag_type IMU_mag;

   typedef  ::nav_msgs::Odometry_<ContainerAllocator>  _VO_type;
  _VO_type VO;

   typedef  ::geometry_msgs::PoseWithCovarianceStamped_<ContainerAllocator>  _EKF_pose_type;
  _EKF_pose_type EKF_pose;





  typedef boost::shared_ptr< ::rpicar::telemetry_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rpicar::telemetry_<ContainerAllocator> const> ConstPtr;

}; // struct telemetry_

typedef ::rpicar::telemetry_<std::allocator<void> > telemetry;

typedef boost::shared_ptr< ::rpicar::telemetry > telemetryPtr;
typedef boost::shared_ptr< ::rpicar::telemetry const> telemetryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rpicar::telemetry_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rpicar::telemetry_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rpicar::telemetry_<ContainerAllocator1> & lhs, const ::rpicar::telemetry_<ContainerAllocator2> & rhs)
{
  return lhs.US1 == rhs.US1 &&
    lhs.US2 == rhs.US2 &&
    lhs.Battery == rhs.Battery &&
    lhs.IMU == rhs.IMU &&
    lhs.IMU_temp == rhs.IMU_temp &&
    lhs.IMU_mag == rhs.IMU_mag &&
    lhs.VO == rhs.VO &&
    lhs.EKF_pose == rhs.EKF_pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rpicar::telemetry_<ContainerAllocator1> & lhs, const ::rpicar::telemetry_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rpicar

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rpicar::telemetry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rpicar::telemetry_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rpicar::telemetry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rpicar::telemetry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rpicar::telemetry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rpicar::telemetry_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rpicar::telemetry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "82f6d27977b146e068901e86d89cdaa2";
  }

  static const char* value(const ::rpicar::telemetry_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x82f6d27977b146e0ULL;
  static const uint64_t static_value2 = 0x68901e86d89cdaa2ULL;
};

template<class ContainerAllocator>
struct DataType< ::rpicar::telemetry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rpicar/telemetry";
  }

  static const char* value(const ::rpicar::telemetry_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rpicar::telemetry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensor_msgs/Range US1\n"
"sensor_msgs/Range US2\n"
"sensor_msgs/BatteryState Battery\n"
"sensor_msgs/Imu IMU\n"
"sensor_msgs/Temperature IMU_temp\n"
"sensor_msgs/MagneticField IMU_mag\n"
"nav_msgs/Odometry VO\n"
"geometry_msgs/PoseWithCovarianceStamped EKF_pose\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/Range\n"
"# Single range reading from an active ranger that emits energy and reports\n"
"# one range reading that is valid along an arc at the distance measured. \n"
"# This message is  not appropriate for laser scanners. See the LaserScan\n"
"# message if you are working with a laser scanner.\n"
"\n"
"# This message also can represent a fixed-distance (binary) ranger.  This\n"
"# sensor will have min_range===max_range===distance of detection.\n"
"# These sensors follow REP 117 and will output -Inf if the object is detected\n"
"# and +Inf if the object is outside of the detection range.\n"
"\n"
"Header header           # timestamp in the header is the time the ranger\n"
"                        # returned the distance reading\n"
"\n"
"# Radiation type enums\n"
"# If you want a value added to this list, send an email to the ros-users list\n"
"uint8 ULTRASOUND=0\n"
"uint8 INFRARED=1\n"
"\n"
"uint8 radiation_type    # the type of radiation used by the sensor\n"
"                        # (sound, IR, etc) [enum]\n"
"\n"
"float32 field_of_view   # the size of the arc that the distance reading is\n"
"                        # valid for [rad]\n"
"                        # the object causing the range reading may have\n"
"                        # been anywhere within -field_of_view/2 and\n"
"                        # field_of_view/2 at the measured range. \n"
"                        # 0 angle corresponds to the x-axis of the sensor.\n"
"\n"
"float32 min_range       # minimum range value [m]\n"
"float32 max_range       # maximum range value [m]\n"
"                        # Fixed distance rangers require min_range==max_range\n"
"\n"
"float32 range           # range data [m]\n"
"                        # (Note: values < range_min or > range_max\n"
"                        # should be discarded)\n"
"                        # Fixed distance rangers only output -Inf or +Inf.\n"
"                        # -Inf represents a detection within fixed distance.\n"
"                        # (Detection too close to the sensor to quantify)\n"
"                        # +Inf represents no detection within the fixed distance.\n"
"                        # (Object out of range)\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/BatteryState\n"
"\n"
"# Constants are chosen to match the enums in the linux kernel\n"
"# defined in include/linux/power_supply.h as of version 3.7\n"
"# The one difference is for style reasons the constants are\n"
"# all uppercase not mixed case.\n"
"\n"
"# Power supply status constants\n"
"uint8 POWER_SUPPLY_STATUS_UNKNOWN = 0\n"
"uint8 POWER_SUPPLY_STATUS_CHARGING = 1\n"
"uint8 POWER_SUPPLY_STATUS_DISCHARGING = 2\n"
"uint8 POWER_SUPPLY_STATUS_NOT_CHARGING = 3\n"
"uint8 POWER_SUPPLY_STATUS_FULL = 4\n"
"\n"
"# Power supply health constants\n"
"uint8 POWER_SUPPLY_HEALTH_UNKNOWN = 0\n"
"uint8 POWER_SUPPLY_HEALTH_GOOD = 1\n"
"uint8 POWER_SUPPLY_HEALTH_OVERHEAT = 2\n"
"uint8 POWER_SUPPLY_HEALTH_DEAD = 3\n"
"uint8 POWER_SUPPLY_HEALTH_OVERVOLTAGE = 4\n"
"uint8 POWER_SUPPLY_HEALTH_UNSPEC_FAILURE = 5\n"
"uint8 POWER_SUPPLY_HEALTH_COLD = 6\n"
"uint8 POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE = 7\n"
"uint8 POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE = 8\n"
"\n"
"# Power supply technology (chemistry) constants\n"
"uint8 POWER_SUPPLY_TECHNOLOGY_UNKNOWN = 0\n"
"uint8 POWER_SUPPLY_TECHNOLOGY_NIMH = 1\n"
"uint8 POWER_SUPPLY_TECHNOLOGY_LION = 2\n"
"uint8 POWER_SUPPLY_TECHNOLOGY_LIPO = 3\n"
"uint8 POWER_SUPPLY_TECHNOLOGY_LIFE = 4\n"
"uint8 POWER_SUPPLY_TECHNOLOGY_NICD = 5\n"
"uint8 POWER_SUPPLY_TECHNOLOGY_LIMN = 6\n"
"\n"
"Header  header\n"
"float32 voltage          # Voltage in Volts (Mandatory)\n"
"float32 current          # Negative when discharging (A)  (If unmeasured NaN)\n"
"float32 charge           # Current charge in Ah  (If unmeasured NaN)\n"
"float32 capacity         # Capacity in Ah (last full capacity)  (If unmeasured NaN)\n"
"float32 design_capacity  # Capacity in Ah (design capacity)  (If unmeasured NaN)\n"
"float32 percentage       # Charge percentage on 0 to 1 range  (If unmeasured NaN)\n"
"uint8   power_supply_status     # The charging status as reported. Values defined above\n"
"uint8   power_supply_health     # The battery health metric. Values defined above\n"
"uint8   power_supply_technology # The battery chemistry. Values defined above\n"
"bool    present          # True if the battery is present\n"
"\n"
"float32[] cell_voltage   # An array of individual cell voltages for each cell in the pack\n"
"                         # If individual voltages unknown but number of cells known set each to NaN\n"
"string location          # The location into which the battery is inserted. (slot number or plug)\n"
"string serial_number     # The best approximation of the battery serial number\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/Imu\n"
"# This is a message to hold data from an IMU (Inertial Measurement Unit)\n"
"#\n"
"# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec\n"
"#\n"
"# If the covariance of the measurement is known, it should be filled in (if all you know is the \n"
"# variance of each measurement, e.g. from the datasheet, just put those along the diagonal)\n"
"# A covariance matrix of all zeros will be interpreted as \"covariance unknown\", and to use the\n"
"# data a covariance will have to be assumed or gotten from some other source\n"
"#\n"
"# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an orientation \n"
"# estimate), please set element 0 of the associated covariance matrix to -1\n"
"# If you are interpreting this message, please check for a value of -1 in the first element of each \n"
"# covariance matrix, and disregard the associated estimate.\n"
"\n"
"Header header\n"
"\n"
"geometry_msgs/Quaternion orientation\n"
"float64[9] orientation_covariance # Row major about x, y, z axes\n"
"\n"
"geometry_msgs/Vector3 angular_velocity\n"
"float64[9] angular_velocity_covariance # Row major about x, y, z axes\n"
"\n"
"geometry_msgs/Vector3 linear_acceleration\n"
"float64[9] linear_acceleration_covariance # Row major x, y z \n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: sensor_msgs/Temperature\n"
" # Single temperature reading.\n"
"\n"
" Header header           # timestamp is the time the temperature was measured\n"
"                         # frame_id is the location of the temperature reading\n"
"\n"
" float64 temperature     # Measurement of the Temperature in Degrees Celsius\n"
"\n"
" float64 variance        # 0 is interpreted as variance unknown\n"
"================================================================================\n"
"MSG: sensor_msgs/MagneticField\n"
" # Measurement of the Magnetic Field vector at a specific location.\n"
"\n"
" # If the covariance of the measurement is known, it should be filled in\n"
" # (if all you know is the variance of each measurement, e.g. from the datasheet,\n"
" #just put those along the diagonal)\n"
" # A covariance matrix of all zeros will be interpreted as \"covariance unknown\",\n"
" # and to use the data a covariance will have to be assumed or gotten from some\n"
" # other source\n"
"\n"
"\n"
" Header header                        # timestamp is the time the\n"
"                                      # field was measured\n"
"                                      # frame_id is the location and orientation\n"
"                                      # of the field measurement\n"
"\n"
" geometry_msgs/Vector3 magnetic_field # x, y, and z components of the\n"
"                                      # field vector in Tesla\n"
"                                      # If your sensor does not output 3 axes,\n"
"                                      # put NaNs in the components not reported.\n"
"\n"
" float64[9] magnetic_field_covariance # Row major about x, y, z axes\n"
"                                      # 0 is interpreted as variance unknown\n"
"================================================================================\n"
"MSG: nav_msgs/Odometry\n"
"# This represents an estimate of a position and velocity in free space.  \n"
"# The pose in this message should be specified in the coordinate frame given by header.frame_id.\n"
"# The twist in this message should be specified in the coordinate frame given by the child_frame_id\n"
"Header header\n"
"string child_frame_id\n"
"geometry_msgs/PoseWithCovariance pose\n"
"geometry_msgs/TwistWithCovariance twist\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovariance\n"
"# This represents a pose in free space with uncertainty.\n"
"\n"
"Pose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/TwistWithCovariance\n"
"# This expresses velocity in free space with uncertainty.\n"
"\n"
"Twist twist\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovarianceStamped\n"
"# This expresses an estimated pose with a reference coordinate frame and timestamp\n"
"\n"
"Header header\n"
"PoseWithCovariance pose\n"
;
  }

  static const char* value(const ::rpicar::telemetry_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rpicar::telemetry_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.US1);
      stream.next(m.US2);
      stream.next(m.Battery);
      stream.next(m.IMU);
      stream.next(m.IMU_temp);
      stream.next(m.IMU_mag);
      stream.next(m.VO);
      stream.next(m.EKF_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct telemetry_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rpicar::telemetry_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rpicar::telemetry_<ContainerAllocator>& v)
  {
    s << indent << "US1: ";
    s << std::endl;
    Printer< ::sensor_msgs::Range_<ContainerAllocator> >::stream(s, indent + "  ", v.US1);
    s << indent << "US2: ";
    s << std::endl;
    Printer< ::sensor_msgs::Range_<ContainerAllocator> >::stream(s, indent + "  ", v.US2);
    s << indent << "Battery: ";
    s << std::endl;
    Printer< ::sensor_msgs::BatteryState_<ContainerAllocator> >::stream(s, indent + "  ", v.Battery);
    s << indent << "IMU: ";
    s << std::endl;
    Printer< ::sensor_msgs::Imu_<ContainerAllocator> >::stream(s, indent + "  ", v.IMU);
    s << indent << "IMU_temp: ";
    s << std::endl;
    Printer< ::sensor_msgs::Temperature_<ContainerAllocator> >::stream(s, indent + "  ", v.IMU_temp);
    s << indent << "IMU_mag: ";
    s << std::endl;
    Printer< ::sensor_msgs::MagneticField_<ContainerAllocator> >::stream(s, indent + "  ", v.IMU_mag);
    s << indent << "VO: ";
    s << std::endl;
    Printer< ::nav_msgs::Odometry_<ContainerAllocator> >::stream(s, indent + "  ", v.VO);
    s << indent << "EKF_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseWithCovarianceStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.EKF_pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RPICAR_MESSAGE_TELEMETRY_H
