# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rpicar/telemetry.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import nav_msgs.msg
import sensor_msgs.msg
import std_msgs.msg

class telemetry(genpy.Message):
  _md5sum = "82f6d27977b146e068901e86d89cdaa2"
  _type = "rpicar/telemetry"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """sensor_msgs/Range US1
sensor_msgs/Range US2
sensor_msgs/BatteryState Battery
sensor_msgs/Imu IMU
sensor_msgs/Temperature IMU_temp
sensor_msgs/MagneticField IMU_mag
nav_msgs/Odometry VO
geometry_msgs/PoseWithCovarianceStamped EKF_pose

================================================================================
MSG: sensor_msgs/Range
# Single range reading from an active ranger that emits energy and reports
# one range reading that is valid along an arc at the distance measured. 
# This message is  not appropriate for laser scanners. See the LaserScan
# message if you are working with a laser scanner.

# This message also can represent a fixed-distance (binary) ranger.  This
# sensor will have min_range===max_range===distance of detection.
# These sensors follow REP 117 and will output -Inf if the object is detected
# and +Inf if the object is outside of the detection range.

Header header           # timestamp in the header is the time the ranger
                        # returned the distance reading

# Radiation type enums
# If you want a value added to this list, send an email to the ros-users list
uint8 ULTRASOUND=0
uint8 INFRARED=1

uint8 radiation_type    # the type of radiation used by the sensor
                        # (sound, IR, etc) [enum]

float32 field_of_view   # the size of the arc that the distance reading is
                        # valid for [rad]
                        # the object causing the range reading may have
                        # been anywhere within -field_of_view/2 and
                        # field_of_view/2 at the measured range. 
                        # 0 angle corresponds to the x-axis of the sensor.

float32 min_range       # minimum range value [m]
float32 max_range       # maximum range value [m]
                        # Fixed distance rangers require min_range==max_range

float32 range           # range data [m]
                        # (Note: values < range_min or > range_max
                        # should be discarded)
                        # Fixed distance rangers only output -Inf or +Inf.
                        # -Inf represents a detection within fixed distance.
                        # (Detection too close to the sensor to quantify)
                        # +Inf represents no detection within the fixed distance.
                        # (Object out of range)
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: sensor_msgs/BatteryState

# Constants are chosen to match the enums in the linux kernel
# defined in include/linux/power_supply.h as of version 3.7
# The one difference is for style reasons the constants are
# all uppercase not mixed case.

# Power supply status constants
uint8 POWER_SUPPLY_STATUS_UNKNOWN = 0
uint8 POWER_SUPPLY_STATUS_CHARGING = 1
uint8 POWER_SUPPLY_STATUS_DISCHARGING = 2
uint8 POWER_SUPPLY_STATUS_NOT_CHARGING = 3
uint8 POWER_SUPPLY_STATUS_FULL = 4

# Power supply health constants
uint8 POWER_SUPPLY_HEALTH_UNKNOWN = 0
uint8 POWER_SUPPLY_HEALTH_GOOD = 1
uint8 POWER_SUPPLY_HEALTH_OVERHEAT = 2
uint8 POWER_SUPPLY_HEALTH_DEAD = 3
uint8 POWER_SUPPLY_HEALTH_OVERVOLTAGE = 4
uint8 POWER_SUPPLY_HEALTH_UNSPEC_FAILURE = 5
uint8 POWER_SUPPLY_HEALTH_COLD = 6
uint8 POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE = 7
uint8 POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE = 8

# Power supply technology (chemistry) constants
uint8 POWER_SUPPLY_TECHNOLOGY_UNKNOWN = 0
uint8 POWER_SUPPLY_TECHNOLOGY_NIMH = 1
uint8 POWER_SUPPLY_TECHNOLOGY_LION = 2
uint8 POWER_SUPPLY_TECHNOLOGY_LIPO = 3
uint8 POWER_SUPPLY_TECHNOLOGY_LIFE = 4
uint8 POWER_SUPPLY_TECHNOLOGY_NICD = 5
uint8 POWER_SUPPLY_TECHNOLOGY_LIMN = 6

Header  header
float32 voltage          # Voltage in Volts (Mandatory)
float32 current          # Negative when discharging (A)  (If unmeasured NaN)
float32 charge           # Current charge in Ah  (If unmeasured NaN)
float32 capacity         # Capacity in Ah (last full capacity)  (If unmeasured NaN)
float32 design_capacity  # Capacity in Ah (design capacity)  (If unmeasured NaN)
float32 percentage       # Charge percentage on 0 to 1 range  (If unmeasured NaN)
uint8   power_supply_status     # The charging status as reported. Values defined above
uint8   power_supply_health     # The battery health metric. Values defined above
uint8   power_supply_technology # The battery chemistry. Values defined above
bool    present          # True if the battery is present

float32[] cell_voltage   # An array of individual cell voltages for each cell in the pack
                         # If individual voltages unknown but number of cells known set each to NaN
string location          # The location into which the battery is inserted. (slot number or plug)
string serial_number     # The best approximation of the battery serial number

================================================================================
MSG: sensor_msgs/Imu
# This is a message to hold data from an IMU (Inertial Measurement Unit)
#
# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec
#
# If the covariance of the measurement is known, it should be filled in (if all you know is the 
# variance of each measurement, e.g. from the datasheet, just put those along the diagonal)
# A covariance matrix of all zeros will be interpreted as "covariance unknown", and to use the
# data a covariance will have to be assumed or gotten from some other source
#
# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an orientation 
# estimate), please set element 0 of the associated covariance matrix to -1
# If you are interpreting this message, please check for a value of -1 in the first element of each 
# covariance matrix, and disregard the associated estimate.

Header header

geometry_msgs/Quaternion orientation
float64[9] orientation_covariance # Row major about x, y, z axes

geometry_msgs/Vector3 angular_velocity
float64[9] angular_velocity_covariance # Row major about x, y, z axes

geometry_msgs/Vector3 linear_acceleration
float64[9] linear_acceleration_covariance # Row major x, y z 

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: sensor_msgs/Temperature
 # Single temperature reading.

 Header header           # timestamp is the time the temperature was measured
                         # frame_id is the location of the temperature reading

 float64 temperature     # Measurement of the Temperature in Degrees Celsius

 float64 variance        # 0 is interpreted as variance unknown
================================================================================
MSG: sensor_msgs/MagneticField
 # Measurement of the Magnetic Field vector at a specific location.

 # If the covariance of the measurement is known, it should be filled in
 # (if all you know is the variance of each measurement, e.g. from the datasheet,
 #just put those along the diagonal)
 # A covariance matrix of all zeros will be interpreted as "covariance unknown",
 # and to use the data a covariance will have to be assumed or gotten from some
 # other source


 Header header                        # timestamp is the time the
                                      # field was measured
                                      # frame_id is the location and orientation
                                      # of the field measurement

 geometry_msgs/Vector3 magnetic_field # x, y, and z components of the
                                      # field vector in Tesla
                                      # If your sensor does not output 3 axes,
                                      # put NaNs in the components not reported.

 float64[9] magnetic_field_covariance # Row major about x, y, z axes
                                      # 0 is interpreted as variance unknown
================================================================================
MSG: nav_msgs/Odometry
# This represents an estimate of a position and velocity in free space.  
# The pose in this message should be specified in the coordinate frame given by header.frame_id.
# The twist in this message should be specified in the coordinate frame given by the child_frame_id
Header header
string child_frame_id
geometry_msgs/PoseWithCovariance pose
geometry_msgs/TwistWithCovariance twist

================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/TwistWithCovariance
# This expresses velocity in free space with uncertainty.

Twist twist

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/PoseWithCovarianceStamped
# This expresses an estimated pose with a reference coordinate frame and timestamp

Header header
PoseWithCovariance pose
"""
  __slots__ = ['US1','US2','Battery','IMU','IMU_temp','IMU_mag','VO','EKF_pose']
  _slot_types = ['sensor_msgs/Range','sensor_msgs/Range','sensor_msgs/BatteryState','sensor_msgs/Imu','sensor_msgs/Temperature','sensor_msgs/MagneticField','nav_msgs/Odometry','geometry_msgs/PoseWithCovarianceStamped']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       US1,US2,Battery,IMU,IMU_temp,IMU_mag,VO,EKF_pose

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(telemetry, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.US1 is None:
        self.US1 = sensor_msgs.msg.Range()
      if self.US2 is None:
        self.US2 = sensor_msgs.msg.Range()
      if self.Battery is None:
        self.Battery = sensor_msgs.msg.BatteryState()
      if self.IMU is None:
        self.IMU = sensor_msgs.msg.Imu()
      if self.IMU_temp is None:
        self.IMU_temp = sensor_msgs.msg.Temperature()
      if self.IMU_mag is None:
        self.IMU_mag = sensor_msgs.msg.MagneticField()
      if self.VO is None:
        self.VO = nav_msgs.msg.Odometry()
      if self.EKF_pose is None:
        self.EKF_pose = geometry_msgs.msg.PoseWithCovarianceStamped()
    else:
      self.US1 = sensor_msgs.msg.Range()
      self.US2 = sensor_msgs.msg.Range()
      self.Battery = sensor_msgs.msg.BatteryState()
      self.IMU = sensor_msgs.msg.Imu()
      self.IMU_temp = sensor_msgs.msg.Temperature()
      self.IMU_mag = sensor_msgs.msg.MagneticField()
      self.VO = nav_msgs.msg.Odometry()
      self.EKF_pose = geometry_msgs.msg.PoseWithCovarianceStamped()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.US1.header.seq, _x.US1.header.stamp.secs, _x.US1.header.stamp.nsecs))
      _x = self.US1.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B4f3I().pack(_x.US1.radiation_type, _x.US1.field_of_view, _x.US1.min_range, _x.US1.max_range, _x.US1.range, _x.US2.header.seq, _x.US2.header.stamp.secs, _x.US2.header.stamp.nsecs))
      _x = self.US2.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B4f3I().pack(_x.US2.radiation_type, _x.US2.field_of_view, _x.US2.min_range, _x.US2.max_range, _x.US2.range, _x.Battery.header.seq, _x.Battery.header.stamp.secs, _x.Battery.header.stamp.nsecs))
      _x = self.Battery.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6f4B().pack(_x.Battery.voltage, _x.Battery.current, _x.Battery.charge, _x.Battery.capacity, _x.Battery.design_capacity, _x.Battery.percentage, _x.Battery.power_supply_status, _x.Battery.power_supply_health, _x.Battery.power_supply_technology, _x.Battery.present))
      length = len(self.Battery.cell_voltage)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.Battery.cell_voltage))
      _x = self.Battery.location
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Battery.serial_number
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.IMU.header.seq, _x.IMU.header.stamp.secs, _x.IMU.header.stamp.nsecs))
      _x = self.IMU.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.IMU.orientation.x, _x.IMU.orientation.y, _x.IMU.orientation.z, _x.IMU.orientation.w))
      buff.write(_get_struct_9d().pack(*self.IMU.orientation_covariance))
      _x = self
      buff.write(_get_struct_3d().pack(_x.IMU.angular_velocity.x, _x.IMU.angular_velocity.y, _x.IMU.angular_velocity.z))
      buff.write(_get_struct_9d().pack(*self.IMU.angular_velocity_covariance))
      _x = self
      buff.write(_get_struct_3d().pack(_x.IMU.linear_acceleration.x, _x.IMU.linear_acceleration.y, _x.IMU.linear_acceleration.z))
      buff.write(_get_struct_9d().pack(*self.IMU.linear_acceleration_covariance))
      _x = self
      buff.write(_get_struct_3I().pack(_x.IMU_temp.header.seq, _x.IMU_temp.header.stamp.secs, _x.IMU_temp.header.stamp.nsecs))
      _x = self.IMU_temp.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2d3I().pack(_x.IMU_temp.temperature, _x.IMU_temp.variance, _x.IMU_mag.header.seq, _x.IMU_mag.header.stamp.secs, _x.IMU_mag.header.stamp.nsecs))
      _x = self.IMU_mag.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3d().pack(_x.IMU_mag.magnetic_field.x, _x.IMU_mag.magnetic_field.y, _x.IMU_mag.magnetic_field.z))
      buff.write(_get_struct_9d().pack(*self.IMU_mag.magnetic_field_covariance))
      _x = self
      buff.write(_get_struct_3I().pack(_x.VO.header.seq, _x.VO.header.stamp.secs, _x.VO.header.stamp.nsecs))
      _x = self.VO.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.VO.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.VO.pose.pose.position.x, _x.VO.pose.pose.position.y, _x.VO.pose.pose.position.z, _x.VO.pose.pose.orientation.x, _x.VO.pose.pose.orientation.y, _x.VO.pose.pose.orientation.z, _x.VO.pose.pose.orientation.w))
      buff.write(_get_struct_36d().pack(*self.VO.pose.covariance))
      _x = self
      buff.write(_get_struct_6d().pack(_x.VO.twist.twist.linear.x, _x.VO.twist.twist.linear.y, _x.VO.twist.twist.linear.z, _x.VO.twist.twist.angular.x, _x.VO.twist.twist.angular.y, _x.VO.twist.twist.angular.z))
      buff.write(_get_struct_36d().pack(*self.VO.twist.covariance))
      _x = self
      buff.write(_get_struct_3I().pack(_x.EKF_pose.header.seq, _x.EKF_pose.header.stamp.secs, _x.EKF_pose.header.stamp.nsecs))
      _x = self.EKF_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.EKF_pose.pose.pose.position.x, _x.EKF_pose.pose.pose.position.y, _x.EKF_pose.pose.pose.position.z, _x.EKF_pose.pose.pose.orientation.x, _x.EKF_pose.pose.pose.orientation.y, _x.EKF_pose.pose.pose.orientation.z, _x.EKF_pose.pose.pose.orientation.w))
      buff.write(_get_struct_36d().pack(*self.EKF_pose.pose.covariance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.US1 is None:
        self.US1 = sensor_msgs.msg.Range()
      if self.US2 is None:
        self.US2 = sensor_msgs.msg.Range()
      if self.Battery is None:
        self.Battery = sensor_msgs.msg.BatteryState()
      if self.IMU is None:
        self.IMU = sensor_msgs.msg.Imu()
      if self.IMU_temp is None:
        self.IMU_temp = sensor_msgs.msg.Temperature()
      if self.IMU_mag is None:
        self.IMU_mag = sensor_msgs.msg.MagneticField()
      if self.VO is None:
        self.VO = nav_msgs.msg.Odometry()
      if self.EKF_pose is None:
        self.EKF_pose = geometry_msgs.msg.PoseWithCovarianceStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.US1.header.seq, _x.US1.header.stamp.secs, _x.US1.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.US1.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.US1.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 29
      (_x.US1.radiation_type, _x.US1.field_of_view, _x.US1.min_range, _x.US1.max_range, _x.US1.range, _x.US2.header.seq, _x.US2.header.stamp.secs, _x.US2.header.stamp.nsecs,) = _get_struct_B4f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.US2.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.US2.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 29
      (_x.US2.radiation_type, _x.US2.field_of_view, _x.US2.min_range, _x.US2.max_range, _x.US2.range, _x.Battery.header.seq, _x.Battery.header.stamp.secs, _x.Battery.header.stamp.nsecs,) = _get_struct_B4f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Battery.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Battery.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.Battery.voltage, _x.Battery.current, _x.Battery.charge, _x.Battery.capacity, _x.Battery.design_capacity, _x.Battery.percentage, _x.Battery.power_supply_status, _x.Battery.power_supply_health, _x.Battery.power_supply_technology, _x.Battery.present,) = _get_struct_6f4B().unpack(str[start:end])
      self.Battery.present = bool(self.Battery.present)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.Battery.cell_voltage = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Battery.location = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Battery.location = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Battery.serial_number = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Battery.serial_number = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.IMU.header.seq, _x.IMU.header.stamp.secs, _x.IMU.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.IMU.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.IMU.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.IMU.orientation.x, _x.IMU.orientation.y, _x.IMU.orientation.z, _x.IMU.orientation.w,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 72
      self.IMU.orientation_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.IMU.angular_velocity.x, _x.IMU.angular_velocity.y, _x.IMU.angular_velocity.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.IMU.angular_velocity_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.IMU.linear_acceleration.x, _x.IMU.linear_acceleration.y, _x.IMU.linear_acceleration.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.IMU.linear_acceleration_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.IMU_temp.header.seq, _x.IMU_temp.header.stamp.secs, _x.IMU_temp.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.IMU_temp.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.IMU_temp.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.IMU_temp.temperature, _x.IMU_temp.variance, _x.IMU_mag.header.seq, _x.IMU_mag.header.stamp.secs, _x.IMU_mag.header.stamp.nsecs,) = _get_struct_2d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.IMU_mag.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.IMU_mag.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.IMU_mag.magnetic_field.x, _x.IMU_mag.magnetic_field.y, _x.IMU_mag.magnetic_field.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.IMU_mag.magnetic_field_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.VO.header.seq, _x.VO.header.stamp.secs, _x.VO.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.VO.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.VO.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.VO.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.VO.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.VO.pose.pose.position.x, _x.VO.pose.pose.position.y, _x.VO.pose.pose.position.z, _x.VO.pose.pose.orientation.x, _x.VO.pose.pose.orientation.y, _x.VO.pose.pose.orientation.z, _x.VO.pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.VO.pose.covariance = _get_struct_36d().unpack(str[start:end])
      _x = self
      start = end
      end += 48
      (_x.VO.twist.twist.linear.x, _x.VO.twist.twist.linear.y, _x.VO.twist.twist.linear.z, _x.VO.twist.twist.angular.x, _x.VO.twist.twist.angular.y, _x.VO.twist.twist.angular.z,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 288
      self.VO.twist.covariance = _get_struct_36d().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.EKF_pose.header.seq, _x.EKF_pose.header.stamp.secs, _x.EKF_pose.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.EKF_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.EKF_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.EKF_pose.pose.pose.position.x, _x.EKF_pose.pose.pose.position.y, _x.EKF_pose.pose.pose.position.z, _x.EKF_pose.pose.pose.orientation.x, _x.EKF_pose.pose.pose.orientation.y, _x.EKF_pose.pose.pose.orientation.z, _x.EKF_pose.pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.EKF_pose.pose.covariance = _get_struct_36d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.US1.header.seq, _x.US1.header.stamp.secs, _x.US1.header.stamp.nsecs))
      _x = self.US1.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B4f3I().pack(_x.US1.radiation_type, _x.US1.field_of_view, _x.US1.min_range, _x.US1.max_range, _x.US1.range, _x.US2.header.seq, _x.US2.header.stamp.secs, _x.US2.header.stamp.nsecs))
      _x = self.US2.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B4f3I().pack(_x.US2.radiation_type, _x.US2.field_of_view, _x.US2.min_range, _x.US2.max_range, _x.US2.range, _x.Battery.header.seq, _x.Battery.header.stamp.secs, _x.Battery.header.stamp.nsecs))
      _x = self.Battery.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6f4B().pack(_x.Battery.voltage, _x.Battery.current, _x.Battery.charge, _x.Battery.capacity, _x.Battery.design_capacity, _x.Battery.percentage, _x.Battery.power_supply_status, _x.Battery.power_supply_health, _x.Battery.power_supply_technology, _x.Battery.present))
      length = len(self.Battery.cell_voltage)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.Battery.cell_voltage.tostring())
      _x = self.Battery.location
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Battery.serial_number
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.IMU.header.seq, _x.IMU.header.stamp.secs, _x.IMU.header.stamp.nsecs))
      _x = self.IMU.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.IMU.orientation.x, _x.IMU.orientation.y, _x.IMU.orientation.z, _x.IMU.orientation.w))
      buff.write(self.IMU.orientation_covariance.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.IMU.angular_velocity.x, _x.IMU.angular_velocity.y, _x.IMU.angular_velocity.z))
      buff.write(self.IMU.angular_velocity_covariance.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.IMU.linear_acceleration.x, _x.IMU.linear_acceleration.y, _x.IMU.linear_acceleration.z))
      buff.write(self.IMU.linear_acceleration_covariance.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.IMU_temp.header.seq, _x.IMU_temp.header.stamp.secs, _x.IMU_temp.header.stamp.nsecs))
      _x = self.IMU_temp.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2d3I().pack(_x.IMU_temp.temperature, _x.IMU_temp.variance, _x.IMU_mag.header.seq, _x.IMU_mag.header.stamp.secs, _x.IMU_mag.header.stamp.nsecs))
      _x = self.IMU_mag.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3d().pack(_x.IMU_mag.magnetic_field.x, _x.IMU_mag.magnetic_field.y, _x.IMU_mag.magnetic_field.z))
      buff.write(self.IMU_mag.magnetic_field_covariance.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.VO.header.seq, _x.VO.header.stamp.secs, _x.VO.header.stamp.nsecs))
      _x = self.VO.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.VO.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.VO.pose.pose.position.x, _x.VO.pose.pose.position.y, _x.VO.pose.pose.position.z, _x.VO.pose.pose.orientation.x, _x.VO.pose.pose.orientation.y, _x.VO.pose.pose.orientation.z, _x.VO.pose.pose.orientation.w))
      buff.write(self.VO.pose.covariance.tostring())
      _x = self
      buff.write(_get_struct_6d().pack(_x.VO.twist.twist.linear.x, _x.VO.twist.twist.linear.y, _x.VO.twist.twist.linear.z, _x.VO.twist.twist.angular.x, _x.VO.twist.twist.angular.y, _x.VO.twist.twist.angular.z))
      buff.write(self.VO.twist.covariance.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.EKF_pose.header.seq, _x.EKF_pose.header.stamp.secs, _x.EKF_pose.header.stamp.nsecs))
      _x = self.EKF_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.EKF_pose.pose.pose.position.x, _x.EKF_pose.pose.pose.position.y, _x.EKF_pose.pose.pose.position.z, _x.EKF_pose.pose.pose.orientation.x, _x.EKF_pose.pose.pose.orientation.y, _x.EKF_pose.pose.pose.orientation.z, _x.EKF_pose.pose.pose.orientation.w))
      buff.write(self.EKF_pose.pose.covariance.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.US1 is None:
        self.US1 = sensor_msgs.msg.Range()
      if self.US2 is None:
        self.US2 = sensor_msgs.msg.Range()
      if self.Battery is None:
        self.Battery = sensor_msgs.msg.BatteryState()
      if self.IMU is None:
        self.IMU = sensor_msgs.msg.Imu()
      if self.IMU_temp is None:
        self.IMU_temp = sensor_msgs.msg.Temperature()
      if self.IMU_mag is None:
        self.IMU_mag = sensor_msgs.msg.MagneticField()
      if self.VO is None:
        self.VO = nav_msgs.msg.Odometry()
      if self.EKF_pose is None:
        self.EKF_pose = geometry_msgs.msg.PoseWithCovarianceStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.US1.header.seq, _x.US1.header.stamp.secs, _x.US1.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.US1.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.US1.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 29
      (_x.US1.radiation_type, _x.US1.field_of_view, _x.US1.min_range, _x.US1.max_range, _x.US1.range, _x.US2.header.seq, _x.US2.header.stamp.secs, _x.US2.header.stamp.nsecs,) = _get_struct_B4f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.US2.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.US2.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 29
      (_x.US2.radiation_type, _x.US2.field_of_view, _x.US2.min_range, _x.US2.max_range, _x.US2.range, _x.Battery.header.seq, _x.Battery.header.stamp.secs, _x.Battery.header.stamp.nsecs,) = _get_struct_B4f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Battery.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Battery.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.Battery.voltage, _x.Battery.current, _x.Battery.charge, _x.Battery.capacity, _x.Battery.design_capacity, _x.Battery.percentage, _x.Battery.power_supply_status, _x.Battery.power_supply_health, _x.Battery.power_supply_technology, _x.Battery.present,) = _get_struct_6f4B().unpack(str[start:end])
      self.Battery.present = bool(self.Battery.present)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.Battery.cell_voltage = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Battery.location = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Battery.location = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Battery.serial_number = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Battery.serial_number = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.IMU.header.seq, _x.IMU.header.stamp.secs, _x.IMU.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.IMU.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.IMU.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.IMU.orientation.x, _x.IMU.orientation.y, _x.IMU.orientation.z, _x.IMU.orientation.w,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 72
      self.IMU.orientation_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 24
      (_x.IMU.angular_velocity.x, _x.IMU.angular_velocity.y, _x.IMU.angular_velocity.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.IMU.angular_velocity_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 24
      (_x.IMU.linear_acceleration.x, _x.IMU.linear_acceleration.y, _x.IMU.linear_acceleration.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.IMU.linear_acceleration_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 12
      (_x.IMU_temp.header.seq, _x.IMU_temp.header.stamp.secs, _x.IMU_temp.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.IMU_temp.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.IMU_temp.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.IMU_temp.temperature, _x.IMU_temp.variance, _x.IMU_mag.header.seq, _x.IMU_mag.header.stamp.secs, _x.IMU_mag.header.stamp.nsecs,) = _get_struct_2d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.IMU_mag.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.IMU_mag.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.IMU_mag.magnetic_field.x, _x.IMU_mag.magnetic_field.y, _x.IMU_mag.magnetic_field.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.IMU_mag.magnetic_field_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 12
      (_x.VO.header.seq, _x.VO.header.stamp.secs, _x.VO.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.VO.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.VO.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.VO.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.VO.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.VO.pose.pose.position.x, _x.VO.pose.pose.position.y, _x.VO.pose.pose.position.z, _x.VO.pose.pose.orientation.x, _x.VO.pose.pose.orientation.y, _x.VO.pose.pose.orientation.z, _x.VO.pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.VO.pose.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 48
      (_x.VO.twist.twist.linear.x, _x.VO.twist.twist.linear.y, _x.VO.twist.twist.linear.z, _x.VO.twist.twist.angular.x, _x.VO.twist.twist.angular.y, _x.VO.twist.twist.angular.z,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 288
      self.VO.twist.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 12
      (_x.EKF_pose.header.seq, _x.EKF_pose.header.stamp.secs, _x.EKF_pose.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.EKF_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.EKF_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.EKF_pose.pose.pose.position.x, _x.EKF_pose.pose.pose.position.y, _x.EKF_pose.pose.pose.position.z, _x.EKF_pose.pose.pose.orientation.x, _x.EKF_pose.pose.pose.orientation.y, _x.EKF_pose.pose.pose.orientation.z, _x.EKF_pose.pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.EKF_pose.pose.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d3I = None
def _get_struct_2d3I():
    global _struct_2d3I
    if _struct_2d3I is None:
        _struct_2d3I = struct.Struct("<2d3I")
    return _struct_2d3I
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_6f4B = None
def _get_struct_6f4B():
    global _struct_6f4B
    if _struct_6f4B is None:
        _struct_6f4B = struct.Struct("<6f4B")
    return _struct_6f4B
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
_struct_B4f3I = None
def _get_struct_B4f3I():
    global _struct_B4f3I
    if _struct_B4f3I is None:
        _struct_B4f3I = struct.Struct("<B4f3I")
    return _struct_B4f3I
